Training your own DeepD3 model
==============================

Use ``deepd3-training`` to start the GUI for generating training sets. 

For each of your training set, please provide

* The original stack as e.g. TIF files
* The spine annotations (binary labels) as TIF or MASK files (the latter from [pipra](https://github.com/anki-xyz/pipra))
* The dendrite annotations as SWC file (only tested for SWC-files generated by [NeuTube](https://neutracing.com/download/))

Create training data
------------------------

Click on the button "Create training data". For each of your stacks, import the stack, the spine annotation and the dendrite annotation file.
If you dendrite annotation is a SWC file, it will create a 3D reconstruction of the SWC file, which will be stored for later use. If you reload the SWC, it will ask you if you want to keep the 3D reconstruction.

After importing all files, enter the metadata (resolution in x, y and z) and determine the region of interest using the bounding box and the sliders.
Shortcuts are ``B`` for current plane is **z begin** and ``E`` for **z end**. You may enable or disable the cropping to the bounding box. If you are happy, save this region as ``d3data``-file.

View training data
------------------------

Click on the button "View training data" to re-visit 
any ``d3data`` files. You also are able to see and potentially 
manipulate the metadata associated the ``d3data`` file.

Arrange training data
------------------------

For training, you need to create a ``d3set``. 
This is an assembly of ``d3data`` files. Click on the button 
"Arrange training data". Then, simply load all relevant data using 
the "Add data to set" button and select appropriate ``d3data`` files. 
Clicking on "Create dataset" allows you to save your assembly 
as ``d3set`` file.

Actual training
------------------------

We have prepared a Jupyter notebook in the folder ``examples``. 
Follow the instructions to train your own deep neural network for DeepD3 use.
For professionals, you also may utilize directly the files in ``model`` 
and ``training`` to allow highly individualized training.
You only should ensure that your model allows arbitrary input and 
outputs two separate channels (dendrites and spines).